Shayan Karmaly
Professor Smallberg
CS31
10 October 2020
                                  Project 1 Report
                   
Step 5: 
For this step, I decided to first test the input of 0 when asked how many registered voters were surveyed. Then I also inputted 0 for how many voters will vote for Joe and Donald. The output was "nan% say they will vote for Joe," and the same thing for Donald. The last line was "Donald is predicted to win the election." I then decided to input 0 for the first question again, however this time I inputted 5 when asked how many voters will vote for Joe as well as Donald. The output was " inf% will vote for Joe," and the same thing for Donald. The last line was "Donald is predicted to win the election." Another test I conducted was by first inputting 50 when asked how many registered voters were surveyed and inputting 50 of them will vote for Joe while 10 will vote for Donald. The output was 100% say they will vote for Joe and 20% will vote for Donald. It predicts Joe will win the election. The last test I did was inputting 50 when asked how many registered voters were surveyed. I then inputted 10 say they will vote for Joe and did the same for Donald. The output resulted in 20% saying they will vote for Joe and 20% saying they will vote for Donald, with Donald predicted to win the election. 

Step 6: 
For this step, I decided to change the calculation for the variables pctJoe and pctDonald by replacing (100 * forJoe/numberSurveyed) & (100 * forDonald/numberSurveyed) to (100 + forJoe/numberSurveyed) & (100 + forDonald/numberSurveyed). When I ran the program, I inputted 20 when asked how many registered voters surveyed. For the voters voting for Joe, I inputted 11 and for the voters voting for Donald, I inputted 9. The output resulted in 100% saying they will vote for Joe as well as 100% saying they will vote for Donald, with Joe being the one predicted to win the election. 

Step 7: 
For this step, I chose a number of simple compiler errors that could result from someone not paying attention to their program. One example I provided was forgetting to place a semi-colon after declaring the variable integer 'numberSurveyed'. Before even running the program, Xcode had already notified me that I was missing a semi-colon there. When I ran it, it said it "expected a semi-colon after the declaration" meaning without that semi-colon, the compiler will not run because the program is not adhering to the grammar rules of the language. After running it on g31, it said error in red and also said it expected a semicolon at the end of a declaration. Another example of a compiler error I provide was when the program asks the user to input how many people will vote for Joe. When reading the input into the variable 'forJoe,' I instead changed it to 'forJo' and the compiler immediately recognized it as an "undeclared identifier" after running it. A common mistake in programming is misspelling and in this case I was trying to store input into a variable that I had declared already but misspelled the variable I was trying to read it into. On g31, it first says error in red because of the use of an undeclared identifier 'forJo'. The last example I provide is having a space in between '<<' in regards to 'cout' and asking the user how many will vote for Donald. When ran, this resulted in the compiler just issuing an error and failing the build. On Xcode it underlined the second '<' and had a red 'x' next the line that it occurred on while on g31 it said error in red and that it expected an expression, referring to the two less than signs that should of been together without a space. 
